(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(all-the-icons-dired treemacs-all-the-icons treemacs maxima pdf-tools multi-compile crux all-the-icons dashboard highlight-indent-guides use-package undo-tree doom-themes company)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;;;; Packages ;;;;

(add-to-list 'load-path "~/.emacs.d/lisp/")

;; Melpa
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless package-archive-contents (package-refresh-contents))

;; use-package
(dolist (package '(use-package))
  (unless (package-installed-p package)
    (package-install package)))

(use-package company
  :ensure t
  :hook (after-init . global-company-mode))

(use-package undo-tree
  :ensure t)

(use-package multi-compile
  :ensure t)

(use-package highlight-indent-guides
  :ensure t)

(use-package doom-themes
  :ensure t)

(use-package dashboard
  :ensure t
  :diminish dashboard-mode
  :config
  (setq dashboard-center-content nil)
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-set-init-info nil)
  (setq dashboard-set-footer nil)
  (setq dashboard-set-navigator t)
  (setq dashboard-banner-logo-title "The editor of gods!")
  (setq dashboard-startup-banner "~/.emacs.d/logo.png")
  (setq dashboard-init-info "Welcome to the church of Emacs!")
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)))
  (dashboard-setup-startup-hook)
  (setq dashboard-item-names '(("Recent Files:" . "    Recent Files:")
                               ("Bookmarks:" . "    Bookmarks:"))))


;;;; APARIENCIA ;;;;

;;(load-theme 'doom-plain)

;; Separador de ventanas
(set-face-foreground 'vertical-border "gray75")

;; Fringes
(setq left-fringe-width 20)
(setq right-fringe-width 20)

;; Tipografías
(setq font-use-system-font t)
(set-face-attribute 'default nil :font "Victor Mono SemiBold"
		    :height 110)
(set-face-attribute 'variable-pitch
		    nil
		    :family "Victor Mono")
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-variable-name-face nil  :slant 'italic)

;; Bordes
(fringe-mode)
(set-face-attribute 'fringe
                    nil
                    :background nil)

;; (if (display-graphic-p)
;;     (progn
;;       (setq-default initial-frame-alist
;;                     '((internal-border-width . 15)))
;;       (setq-default default-frame-alist
;;                     '((internal-border-width . 15)))))

;; Wrapping
(global-visual-line-mode)

;; Guias de indentación
(setq highlight-indent-guides-method 'bitmap)
(defun my-highlighter (level responsive display)
  (if (> 1 level)
      nil
    (highlight-indent-guides--highlighter-default level responsive display)))
(setq highlight-indent-guides-highlighter-function 'my-highlighter)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

;; Pantalla de inicio
(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)
(setq inhibit-startup-echo-area-message t)
(setq initial-scratch-message "")


;;;; PREFERENCIAS ;;;;

;; Autopair
(add-hook 'after-init-hook 'electric-pair-mode 1)

;; Deshacer (C-_) y rehacer (M-_)
(global-undo-tree-mode)

;; Historial
(savehist-mode 1)
(setq history-length 1000)

;; Respaldos
(setq backup-directory-alist `(("." . "~/.emacs.d/saves")))

;; Indentación
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

(electric-indent-mode 1)
(dolist (command '(yank yank-pop))
  (eval `(defadvice ,command (after indent-region activate)
           (and (not current-prefix-arg)
                (member major-mode '(emacs-lisp-mode
                                     lisp-mode
                                     c-mode
                                     plain-tex-mode
                                     ruby-mode
                                     python-mode
                                     c++-mode
                                     latex-mode))
                (let ((mark-even-if-inactive transient-mark-mode))
                  (indent-region (region-beginning) (region-end) nil))))))

;; Herramientas
;(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)

;; Números de línea
;(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; Quitar alarmas
(setq ring-bell-function 'ignore)

;; Resaltar paréntesis
(show-paren-mode t)

;; Habilitar formato de mayúsculas y minúsculas
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; Desplazamiento
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't)
(setq scroll-step 1)
(setq scroll-preserve-screen-position 1)

;; Respuestas
(fset 'yes-or-no-p 'y-or-n-p)

;; Espacios de fin de linea
(add-hook 'before-save-hook 'my-prog-nuke-trailing-whitespace)
;(add-hook 'before-save-hook 'delete-trailing-whitespace)
(defun my-prog-nuke-trailing-whitespace ()
  (when (derived-mode-p 'prog-mode)
    (delete-trailing-whitespace)))

;; Borrado seguro
(setq-default delete-by-moving-to-trash t)

;; Autorefrescar cuando el archivo se ha cambiado
(global-auto-revert-mode t)

;;;; IDO ;;;;
(ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-ignore-buffers '("^ " "*Completions*" "*Shell Command Output*" "*Messages*" "Async Shell Command" "KILL"))
(setq ido-file-extensions-order '(".org" ".tex" ".emacs" ".pdf" ".txt"))


;;;; ARCHIVOS RECIENTES ;;;;

(require 'recentf)
(recentf-mode nil)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.

(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
;; enable recent files mode.
(setq recentf-max-saved-items 10)

(add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/elpa/.*" (getenv "HOME")))
(add-to-list 'recentf-exclude
             (expand-file-name "~/.emacs.d/recentf"))

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))

;;;; TREEMACS ;;;;
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))

  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-read-string-input             'from-child-frame
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             nil
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      nil
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         40
          treemacs-workspace-switch-cleanup      nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    (treemacs-resize-icons 16)
    (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode -1)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

;;(all-the-icons-install-fonts)
(use-package treemacs-all-the-icons
  :config (treemacs-load-theme "all-the-icons")
  :ensure t)
(use-package all-the-icons-dired
  :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  :ensure t)
(setq inhibit-compacting-font-caches t)

;;;; BUFFERS ;;;;

(defun only-current-buffer ()
  "Kill other buffers."
  (interactive)
  (mapc 'kill-buffer (cdr (buffer-list (current-buffer)))))

;; BUFFERS

(require 'ibuf-ext)
(add-to-list 'ibuffer-never-show-predicates "^\\*")

(setq ido-ignore-buffers '("\\` " "^\*"))

(defun next-code-buffer ()
  (interactive)
  (let (( bread-crumb (buffer-name) ))
    (next-buffer)
    (while
        (and
         (string-match-p "^\*" (buffer-name))
         (not ( equal bread-crumb (buffer-name) )) )
      (next-buffer))))

(setq ibuffer-formats
      '((mark modified read-only " " filename-and-process)))

(setq ibuffer-display-summary nil)
(defadvice ibuffer-update-title-and-summary (after remove-column-titles)
  (with-current-buffer
      (read-only-mode 0)
    (goto-char 1)
    (search-forward "-\n" nil t)
    (delete-region 1 (point))
    (let ((window-min-height 1))
      ;; save a little screen estate
      (shrink-window-if-larger-than-buffer))
    (read-only-mode)))

(ad-activate 'ibuffer-update-title-and-summary)

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))

;; Delete *Completions*
(add-hook 'minibuffer-exit-hook
          '(lambda ()
             (let ((buffer "*Completions*"))
               (and (get-buffer buffer)
                    (kill-buffer buffer)))))

;;;; LENGUAJES ;;;;

;; Chordpro
(setq auto-mode-alist (cons '("\\.pro$" . chordpro-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.cho$" . chordpro-mode) auto-mode-alist))
(autoload 'chordpro-mode "chordpro-mode")


;;;; COMPILE ;;;;

(setq multi-compile-alist '(
                            (chordpro-mode . (("Chordpro compile songbook" .
                                               "chordpro *.cho -o songbook.pdf")
                                              ("Chordpro compile file" .
                                               "chordpro %file-name")))
                            ))

(defun cyco:compile-autoclose (buffer string)
  (cond ((string-match "finished" string)
         (message "Build maybe succesful: clossing window.")
         (run-with-timer 1 nil
                         'delete-window
                         (get-buffer-window buffer t)))
        (
         (message "Compilation exited abnormally: %s" string))))

(setq compilation-finish-functions 'cyco:compile-autoclose)
(global-set-key [f5] 'multi-compile-run)


;;;; TERMINAL ;;;;

(require 'term)

(defun open-external-terminal ()
  (interactive)
  (let ((proc (start-process "bash" nil "gnome-terminal")))
    (set-process-query-on-exit-flag proc nil)))

(defun open-ansi-terminal ()
  (interactive)
  (let ((w (split-window-below 2)))
    (select-window w)
    (if (eq (get-buffer "*ansi-term*") nil)
        (ansi-term "/bin/bash")
      (switch-to-buffer "*ansi-term*"))))

(defun set-no-process-query-on-exit ()

  (let ((proc (get-buffer-process (current-buffer))))
    (when (processp proc)
      (set-process-query-on-exit-flag proc nil))))

(global-set-key (kbd "C-c t") 'open-external-terminal)
(global-set-key (kbd "C-c C-t") 'open-ansi-terminal)

(add-hook 'term-exec-hook 'set-no-process-query-on-exit)
(add-hook 'shell-mode-hook 'set-no-process-query-on-exit)

(define-key term-raw-map (kbd "C-c C-t") 'delete-window)
(define-key term-raw-map (kbd "C-c t") 'kill-buffer-and-window)


;;;; KEYBINDINGS ;;;;

;; Indentar
(global-set-key (kbd "C->") 'indent-rigidly-right-to-tab-stop)
(global-set-key (kbd "C-<") 'indent-rigidly-left-to-tab-stop)

;; Scroll
(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "M-p ") (kbd "C-u 1 M-v"))

;; Cambiar de buffer
(global-set-key [remap next-buffer] 'next-code-buffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "<C-tab>") 'next-code-buffer)

;; Modeline

(define-minor-mode minor-mode-blackout-mode
  "Hides minor modes from the modeline"
  t)
(catch 'done
  (mapc (lambda (x)
          (when (and (consp x)
                     (equal (cadr x) '("" minor-mode-alist)))
            (let ((original (copy-sequence x)))
              (setcar x 'minor-mode-blackout-mode)
              (setcdr x (list "" original)))
            (throw 'done t)))
        mode-line-modes))

(defun my-modeline-padding (right-segments)
  (propertize
   " " 'display
   `((space :align-to (- (+ right right-fringe right-margin)
                         ,(+ 1 (string-width right-segments)))))))

(setq-default mode-line-format
              (list
               "  "
               mode-line-mule-info
               mode-line-modified
               mode-line-frame-identification
               mode-line-buffer-identification
               "  "
               mode-line-position
               '(:eval (my-modeline-padding (format-mode-line
                                             mode-line-modes)))
               mode-line-modes
               ))

(set-face-attribute 'mode-line nil
                    :background "gray75"
                    :foreground "black"
                    ;;:box '(:line-width -1 :color "gray60")
                    :box nil
                    :overline nil
                    :underline nil)

(set-face-attribute 'mode-line-inactive nil
                    :background "gray90"
                    :foreground "gray20"
                    ;;:box '(:line-width -1 :color "gray50")
                    :box nil
                    :overline nil
                    :underline nil)

(set-face-attribute 'mode-line-highlight nil
                    :box nil
                    :background nil
                    :foreground "white")
(setq column-number-mode nil)
(force-mode-line-update t)
