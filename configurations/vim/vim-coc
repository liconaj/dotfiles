source $VIMRUNTIME/mswin.vim
behave mswin

" VIM PLUG AUTOINSTALLATION:

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'
Plug 'arcticicestudio/nord-vim'
Plug 'joshdick/onedark.vim'
Plug 'sainnhe/edge'
Plug 'sainnhe/sonokai'
Plug 'sainnhe/everforest'
Plug 'sainnhe/gruvbox-material'
Plug 'sonph/onehalf', {'rtp': 'vim/'}
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
Plug 'rakr/vim-one'

Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'

Plug 'mhinz/vim-startify'
Plug 'preservim/nerdtree'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'SirVer/ultisnips'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'skywind3000/asyncrun.vim'

Plug 'fatih/vim-go'
Plug 'sheerun/vim-polyglot'
call plug#end()


" OPTIONS:

let mapleader=' '
set nocompatible

filetype plugin indent on
syntax on

set autoindent
set softtabstop=4
set shiftwidth=4
set shiftround

set backspace=indent,eol,start
set virtualedit=block,onemore
set scrolljump=5
set scrolloff=3
set sidescroll=1
set sidescrolloff=10
set hidden
set laststatus=2
set display=lastline

set showmode
set showcmd

set incsearch
set nohlsearch
set ignorecase
set smartcase

set ttyfast
set lazyredraw

set splitright
set splitbelow

set cursorbind
set wrapscan
set wrap
set whichwrap+=<,>,h,l,[,]
set report=0

set number
set autochdir
set clipboard=unnamedplus
set formatoptions+=rnlmM

if &shell =~# 'fish$'
  set shell=/bin/bash
endif

set backup
set backupdir=$HOME/.vim/files/backup
set backupext=-vimbackup
set backupskip=
set directory=$HOME/.vim/files/swap//
set updatecount=100
set undofile
set undodir=$HOME/.vim/files/undo
set viminfo='100,n$HOME/.vim/files/info/viminfo

set encoding=utf8
set fileencodings=ucs-bom,utf-8,default,cp936,big5,latin1
set fileformats=unix,mac,dos

set showtabline=2
set shortmess+=at
set mouse=a
set nospell
set wildmenu
set wildignore=*.so,*.swp,.*pyc,*.pyo,*.exe,*.zip
if has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*,*\desktop.ini
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
end

if (has('termguicolors'))
		set termguicolors
endif

" TRAILING WHITESPACES
"autocmd FileType c,cpp,go,py,lua autocmd BufWritePre <buffer> %s/\s\+$//e
autocmd BufWritePre <buffer> %s/\s\+$//e

" THEME:
let g:light_theme = 1

if !has('gui_running')
    let g:onedark_termcolors=16
    set nonumber
endif

if has('gui_running')
    set t_CO=256
    let g:onedark_termcolors=256
    let g:one_allow_italics=1
    let g:onedark_terminal_italics=1
endif

let g:gruvbox_material_background='medium'
let g:everforest_background='hard'
let g:onedark_hide_endofbuffer=1
let g:material_terminal_italics = 1
" default, palenight, ocean, lighter, darker
let g:material_theme_style = 'ocean'

if g:light_theme
		set background=light
		colorscheme edge
		let b:lightline_theme = 'edge'
else
		set background=dark
		colorscheme everforest
		let b:lightline_theme = 'everforest'
endif

let g:lightline = {
		  \ 'colorscheme' : b:lightline_theme,
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'tabline': {
      \   'left': [ ['buffers'] ],
      \   'right': [ ['text'] ]
      \ },
      \ 'component_expand': {
      \   'buffers': 'lightline#bufferline#buffers'
      \ },
      \ 'component_type': {
      \   'buffers': 'tabsel'
      \ },
      \ 'component': { 'text': 'BUFFERS' },
      \ }
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline#bufferline#show_number  = 0

if has('gui_running')
    set lines=30
    set columns=90
    set guioptions-=aegimrLtT
    set guioptions+=m
    "set guifont=Victor\ Mono\ SemiBold\ 11
    set guifont=Iosevka\ Medium\ 12
endif

" CURSOR:
let g:always_center = 1
if g:always_center == 0 | augroup! always_center | endif
augroup always_center
    autocmd!
    autocmd VimEnter,WinEnter,VimResized * call AlwaysCenterOrNot()
augroup END

function! AlwaysCenterOrNot()
    if g:always_center
        " Use <Enter> to keep center in insert mode, need proper scrolloff
        let &scrolloff = float2nr(floor(winheight(0) / 2) + 1)
        inoremap <CR> <CR><C-o>zz
    else
        let &scrolloff = 0
        silent! iunmap <CR>
    endif
endfunction

" COC:
command! -nargs=0 Prettier :CocCommand prettier.formatFile
let g:coc_global_extensions = [
	    \ 'coc-json',
	    \ 'coc-git',
	    \ 'coc-go',
	    \ 'coc-html',
	    \ 'coc-jedi',
	    \ 'coc-toml',
	    \ 'coc-python',
	    \ 'coc-vimlsp',
	    \ 'coc-snippets',
	    \ 'coc-prettier',
	    \ 'coc-pairs',
	    \ ]

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
if exists('*complete_info')
  inoremap <silent><expr> <cr> complete_info(['selected'])['selected'] != -1 ? "\<C-y>" : "\<C-g>u\<CR>"
endif

imap <C-j> <Plug>(coc-snippets-expand-jump)
vmap <C-j> <Plug>(coc-snippets-expand)
let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'

" FILE BROWSING:
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=0
let g:netrw_menu=0

" FILETREE:
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTree<CR>


" ASYNCRUN:
nnoremap <silent> <expr> & ':AsyncRun -post=cw ' . input('>') . '<CR>'
nnoremap <silent> <expr> g& ':AsyncRun -save -post=copen -strip ' . input('>', 'rg --vimgrep ' . expand('<cword>') . ' %') . '<CR>


" GOLANG:

autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
autocmd FileType go nmap ,b  <Plug>(go-build)
autocmd FileType go nmap ,r  <Plug>(go-run)
autocmd FileType go nmap ,t  <Plug>(go-test)

let g:go_highlight_types=1
let g:go_highlight_extra_types=1
let g:go_highlight_functions=1
let g:go_highlight_function_calls=1
let g:go_highlight_build_constraints=1

let g:go_fmt_command = "goimports"
let g:go_addtags_transform = "camelcase"
let g:go_textobj_include_function_doc = 0


" SESSION:

function! MakeSession()
		if g:sessionfile != ""
				echo "Saving."
				if (filewritable(g:sessiondir) != 2)
						exe 'silent !mkdir -p ' g:sessiondir
						redraw!
				endif
				exe "mksession! " . g:sessionfile
		endif
endfunction

function! LoadSession()
		if argc() == 0
				let g:sessiondir = $HOME . "/.vim/sessions" . getcwd()
				let g:sessionfile = g:sessiondir . "/session.vim"
				if (filereadable(g:sessionfile))
						exe 'source ' g:sessionfile
				else
						echo "No session loaded."
				endif
		else
				let g:sessionfile = ""
				let g:sessiondir = ""
		endif
endfunction

"au VimEnter * nested :call LoadSession()
au VimLeave * :call MakeSession()
map ,l :call LoadSession()<CR>

set sessionoptions-=options  " Don't save options

" STARTIFY:
let g:startify_custom_header=[]
let g:startify_lists=[
	    \ { 'type': 'files', 'header': ['    Recent files']},
	    \ ]


" INSERT COMMAND:
inoremap <M-x> <esc>:
nnoremap <M-x> :

" HOME MAP:
nnoremap <M-m> ^
inoremap <M-m> <C-o>^
vnoremap <M-m> ^

" BUFFER NAVIGATION:
nnoremap <leader>l :bnext<CR>
nnoremap <leader>h :bprevious<CR>
nnoremap <leader>q :bdelete<CR>

nmap <Leader>1 <Plug>lightline#bufferline#go(1)
nmap <Leader>2 <Plug>lightline#bufferline#go(2)
nmap <Leader>3 <Plug>lightline#bufferline#go(3)
nmap <Leader>4 <Plug>lightline#bufferline#go(4)
nmap <Leader>5 <Plug>lightline#bufferline#go(5)
nmap <Leader>6 <Plug>lightline#bufferline#go(6)
nmap <Leader>7 <Plug>lightline#bufferline#go(7)
nmap <Leader>8 <Plug>lightline#bufferline#go(8)
nmap <Leader>9 <Plug>lightline#bufferline#go(9)
nmap <Leader>0 <Plug>lightline#bufferline#go(10)

nmap <Leader>c1 <Plug>lightline#bufferline#delete(1)
nmap <Leader>c2 <Plug>lightline#bufferline#delete(2)
nmap <Leader>c3 <Plug>lightline#bufferline#delete(3)
nmap <Leader>c4 <Plug>lightline#bufferline#delete(4)
nmap <Leader>c5 <Plug>lightline#bufferline#delete(5)
nmap <Leader>c6 <Plug>lightline#bufferline#delete(6)
nmap <Leader>c7 <Plug>lightline#bufferline#delete(7)
nmap <Leader>c8 <Plug>lightline#bufferline#delete(8)
nmap <Leader>c9 <Plug>lightline#bufferline#delete(9)
nmap <Leader>c0 <Plug>lightline#bufferline#delete(10)

